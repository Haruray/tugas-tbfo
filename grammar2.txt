S -> CODE NEWLINE CODE | NEWLINE CODE | CODE NEWLINE | ASSIGNMENT_OPERAND ASSIGNMENT_OPERATOR ASSIGNMENT_OPERAND | DEF_HEADER DEF_BODY | .
CODE -> CODE NEWLINE CODE | NEWLINE CODE | CODE NEWLINE | ASSIGNMENT_OPERAND ASSIGNMENT_OPERATOR ASSIGNMENT_OPERAND | DEF_HEADER DEF_BODY | .

ASSIGNMENT -> ASSIGNMENT_OPERAND ASSIGNMENT_OPERATOR ASSIGNMENT_OPERAND
ASSIGNMENT_OPERATOR -> = | PLUS EQ | MINUS EQ | MULTIPLY EQ | DIVISION EQ
ASSIGNMENT_OPERAND -> PARANTH_OPEN ASSIGNMENT_OPERAND PARANTH_CLOSE | ^ | ~ | g | d | c

//def and function
DEF_FUNCTION -> DEF_HEADER DEF_BODY
DEF_HEADER -> DEF VARIABLE PARANTH_OPEN DEF_PARAMETER PARANTH_CLOSE COLON NEWLINE | DEF VARIABLE PARANTH_OPEN PARANTH_CLOSE COLON NEWLINE
DEF_PARAMETER -> DEF_PARAMETER COMMA DEF_PARAMETER | ^
DEF_BODY -> CODE DEF_RETURN | RETURN VARIABLE | RETURN CONST | RETURN ASSIGNMENT_OPERAND
DEF_RETURN -> RETURN VARIABLE | RETURN CONST | RETURN ASSIGNMENT_OPERAND

//misc
NEWLINE -> @
COLON -> :
VARIABLE -> ^
CONST -> ~
PARANTH_OPEN -> (
PARANTH_CLOSE -> )
BRACKET_OPEN -> [
BRACKET_CLOSE -> ]
CURLY_BRACKET_OPEN -> {
CURLY_BRACKET_CLOSE -> }
COMMA -> ,
ALL -> *

IF -> a
CLASS -> b
FALSE -> c
TRUE -> d
IS -> e
RETURN -> f
NONE -> g
CONTINUE -> h
FOR -> i
DEF -> j
FROM -> k
WHILE -> n
WITH -> m
AS -> o
ELIF -> p
ELSE -> q
IMPORT -> r
PASS -> s
BREAK -> t
IN -> u
RAISE -> v
RANGE -> w

PLUS -> +
MINUS -> -
DIVISION -> /
MULTIPLY -> *
GT -> >
LT -> <
EQ -> =
EXCLAMATION -> !
GTE -> GT EQ
LTE -> LT EQ
EQEQ -> EQ EQ
NOTEQ -> EXCLAMATION EQ
MOD -> %
AND -> &
OR -> #
NOT -> !
INC -> PLUS EQ
DEC -> MINUS EQ

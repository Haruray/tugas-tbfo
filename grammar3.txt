S -> CODE NEWLINE CODE | NEWLINE CODE | CODE NEWLINE | IF_HEAD CODE | IF_CODE ELIF_CODE | IF_CODE ELSE_CODE | ASSIGNMENT_OPERAND ASSIGNMENT_OPERATOR ASSIGNMENT_OPERAND | DEF_HEADER DEF_BODY | IMPORT CODE | FOR_HEADER CODE | WHILE_HEADER CODE | t | h | PARANTH_OPEN ARITHMETIC PARANTH_CLOSE | ARITHMETIC ARITHMETIC_OPERATOR ARITHMETIC | ^ | ~ | VARIABLE PARANTH_OPEN DEF_PARAMETER PARANTH_CLOSE | VARIABLE PARANTH_OPEN PARANTH_CLOSE | .
CODE -> CODE NEWLINE CODE | NEWLINE CODE | CODE NEWLINE | IF_HEAD CODE | IF_CODE ELIF_CODE | IF_CODE ELSE_CODE | ASSIGNMENT_OPERAND ASSIGNMENT_OPERATOR ASSIGNMENT_OPERAND | DEF_HEADER DEF_BODY | IMPORT CODE | FOR_HEADER CODE | WHILE_HEADER CODE | t | h | PARANTH_OPEN ARITHMETIC PARANTH_CLOSE | ARITHMETIC ARITHMETIC_OPERATOR ARITHMETIC | ^ | ~ | VARIABLE PARANTH_OPEN DEF_PARAMETER PARANTH_CLOSE | VARIABLE PARANTH_OPEN PARANTH_CLOSE | .

//if thing
IF_CODE -> IF_HEAD CODE | IF_CODE ELIF_CODE | IF_CODE ELSE_CODE
IF_HEAD -> IF CONDITION COLON NEWLINE
ELIF_CODE -> ELIF_HEAD CODE | ELIF_CODE ELIF_CODE | ELIF_CODE ELSE_CODE
ELIF_HEAD -> ELIF CONDITION COLON NEWLINE
ELSE_CODE -> ELSE_HEAD CODE
ELSE_HEAD -> ELSE COLON NEWLINE

//conditional operations
CONDITION -> PARANTH_OPEN CONDITION PARANTH_CLOSE | CONDITION_OPERAND CONDITION_OPERATOR CONDITION | NOT CONDITION_OPERAND | ^ | ~ | PARANTH_OPEN CONDITION_OPERAND PARANTH_CLOSE | g | d | c
CONDITION_OPERATOR -> > | < | = | GT EQ | LT EQ | EQ EQ | EXCLAMATION EQ | & | # | !
CONDITION_OPERAND -> NOT CONDITION_OPERAND | ^ | ~ | PARANTH_OPEN CONDITION_OPERAND PARANTH_CLOSE | g | d | c | PARANTH_OPEN ARITHMETIC PARANTH_CLOSE | ARITHMETIC ARITHMETIC_OPERATOR ARITHMETIC | ^ | ~ | VARIABLE PARANTH_OPEN DEF_PARAMETER PARANTH_CLOSE | VARIABLE PARANTH_OPEN PARANTH_CLOSE

//assignment
ASSIGNMENT -> ASSIGNMENT_OPERAND ASSIGNMENT_OPERATOR ASSIGNMENT_OPERAND
ASSIGNMENT_OPERATOR -> = | PLUS EQ | MINUS EQ | MULTIPLY EQ | DIVISION EQ
ASSIGNMENT_OPERAND -> PARANTH_OPEN ASSIGNMENT_OPERAND PARANTH_CLOSE | ^ | ~ | PARANTH_OPEN CONDITION PARANTH_CLOSE | CONDITION_OPERAND CONDITION_OPERATOR CONDITION | NOT CONDITION_OPERAND | ^ | ~ | PARANTH_OPEN CONDITION_OPERAND PARANTH_CLOSE | g | d | c | VARIABLE PARANTH_OPEN DEF_PARAMETER PARANTH_CLOSE | VARIABLE PARANTH_OPEN PARANTH_CLOSE | VARIABLE BRACKET_OPEN LIST_CONTENT BRACKET_CLOSE | BRACKET_OPEN BRACKET_CLOSE | CURLY_BRACKET_OPEN DICT_CONTENT CURLY_BRACKET_CLOSE | CURLY_BRACKET_OPEN CURLY_BRACKET_CLOSE | CURLY_BRACKET_OPEN NEWLINE DICT_CONTENT CURLY_BRACKET_CLOSE | CURLY_BRACKET_OPEN NEWLINE DICT_CONTENT NEWLINE CURLY_BRACKET_CLOSE | CURLY_BRACKET_OPEN DICT_CONTENT NEWLINE CURLY_BRACKET_CLOSE | ARITHMETIC

//def and function
DEF_FUNCTION -> DEF_HEADER DEF_BODY
DEF_HEADER -> DEF VARIABLE PARANTH_OPEN DEF_PARAMETER PARANTH_CLOSE COLON NEWLINE | DEF VARIABLE PARANTH_OPEN PARANTH_CLOSE COLON NEWLINE
DEF_PARAMETER -> DEF_PARAMETER COMMA DEF_PARAMETER | ^
DEF_BODY -> DEF_BODY NEWLINE DEF_BODY | RETURN VARIABLE | RETURN CONST | RETURN ASSIGNMENT_OPERAND
DEF_RETURN -> RETURN VARIABLE | RETURN CONST | RETURN ASSIGNMENT_OPERAND | RETURN CONDITION_OPERAND | RETURN PARANTH_OPEN ARITHMETIC PARANTH_CLOSE | ARITHMETIC ARITHMETIC_OPERATOR ARITHMETIC | ^ | ~ | VARIABLE PARANTH_OPEN DEF_PARAMETER PARANTH_CLOSE | VARIABLE PARANTH_OPEN PARANTH_CLOSE | f

//list 
LIST -> VARIABLE BRACKET_OPEN LIST_CONTENT BRACKET_CLOSE | BRACKET_OPEN BRACKET_CLOSE
LIST_TYPE -> ^ | ~ | VARIABLE PARANTH_OPEN DEF_PARAMETER PARANTH_CLOSE | VARIABLE PARANTH_OPEN PARANTH_CLOSE | VARIABLE BRACKET_OPEN LIST_CONTENT BRACKET_CLOSE | BRACKET_OPEN BRACKET_CLOSE | g
LIST_CONTENT -> ^ | ~ | VARIABLE PARANTH_OPEN DEF_PARAMETER PARANTH_CLOSE | VARIABLE PARANTH_OPEN PARANTH_CLOSE | VARIABLE BRACKET_OPEN LIST_CONTENT BRACKET_CLOSE | BRACKET_OPEN BRACKET_CLOSE | g | LIST_CONTENT COMMA LIST_TYPE | LIST_TYPE FOR VARIABLE IN FUNCTION

//dict
DICT -> CURLY_BRACKET_OPEN DICT_CONTENT CURLY_BRACKET_CLOSE | CURLY_BRACKET_OPEN CURLY_BRACKET_CLOSE | CURLY_BRACKET_OPEN NEWLINE DICT_CONTENT CURLY_BRACKET_CLOSE | CURLY_BRACKET_OPEN NEWLINE DICT_CONTENT NEWLINE CURLY_BRACKET_CLOSE | CURLY_BRACKET_OPEN DICT_CONTENT NEWLINE CURLY_BRACKET_CLOSE
DICT_CONTENT -> DICT_TYPE COMMA DICT_TYPE | QUOTE DICT_TYPE_VAR QUOTE COLON DICT_TYPE_VAR | DOUBLE_QUOTE DICT_TYPE_VAR DOUBLE_QUOTE COLON DICT_TYPE_VAR | DICT_TYPE_VAR COLON DICT_TYPE_VAR | DICT_TYPE COMMA NEWLINE DICT_TYPE
DICT_TYPE -> QUOTE DICT_TYPE_VAR QUOTE COLON DICT_TYPE_VAR | DOUBLE_QUOTE DICT_TYPE_VAR DOUBLE_QUOTE COLON DICT_TYPE_VAR | DICT_TYPE_VAR COLON DICT_TYPE_VAR
DICT_TYPE_VAR -> ^ | ~ | VARIABLE PARANTH_OPEN DEF_PARAMETER PARANTH_CLOSE | VARIABLE PARANTH_OPEN PARANTH_CLOSE | g

//function
FUNCTION -> VARIABLE PARANTH_OPEN DEF_PARAMETER PARANTH_CLOSE | VARIABLE PARANTH_OPEN PARANTH_CLOSE

//import
IMPORT -> FROM VARIABLE IMPORT IMPORT_CONTENT NEWLINE | IMPORT VAR NEWLINE
IMPORT_CONTENT -> ^ | *

//loop
LOOP -> FOR_HEADER CODE | WHILE_HEADER CODE
FOR_LOOP -> FOR_HEADER CODE
FOR_HEADER -> FOR VARIABLE IN ITERATE COLON NEWLINE
ITERATE -> VARIABLE | FUNCTION | RANGE | DICT | LIST

WHILE_LOOP -> WHILE_HEADER CODE
WHILE_HEADER -> WHILE CONDITION COLON NEWLINE

//arithmetic
ARITHMETIC -> PARANTH_OPEN ARITHMETIC PARANTH_CLOSE | ARITHMETIC ARITHMETIC_OPERATOR ARITHMETIC | ^ | ~ | VARIABLE PARANTH_OPEN DEF_PARAMETER PARANTH_CLOSE | VARIABLE PARANTH_OPEN PARANTH_CLOSE
ARITHMETIC_OPERATOR -> + | - | / | * | %
ARITHMETIC_OPERAND -> ^ | ~ | VARIABLE PARANTH_OPEN DEF_PARAMETER PARANTH_CLOSE | VARIABLE PARANTH_OPEN PARANTH_CLOSE

//misc
NEWLINE -> @
COLON -> :
VARIABLE -> ^
CONST -> ~
PARANTH_OPEN -> (
PARANTH_CLOSE -> )
BRACKET_OPEN -> [
BRACKET_CLOSE -> ]
CURLY_BRACKET_OPEN -> {
CURLY_BRACKET_CLOSE -> }
COMMA -> ,
ALL -> *
QUOTE -> '
DOUBLE_QUOTE -> "

IF -> a
CLASS -> b
FALSE -> c
TRUE -> d
IS -> e
RETURN -> f
NONE -> g
CONTINUE -> h
FOR -> i
DEF -> j
FROM -> k
WHILE -> n
WITH -> m
AS -> o
ELIF -> p
ELSE -> q
IMPORT -> r
PASS -> s
BREAK -> t
IN -> u
RAISE -> v
RANGE -> w

PLUS -> +
MINUS -> -
DIVISION -> /
MULTIPLY -> *
GT -> >
LT -> <
EQ -> =
EXCLAMATION -> !
GTE -> GT EQ
LTE -> LT EQ
EQEQ -> EQ EQ
NOTEQ -> EXCLAMATION EQ
MOD -> %
AND -> &
OR -> #
NOT -> !
INC -> PLUS EQ
DEC -> MINUS EQ